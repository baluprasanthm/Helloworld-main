name: JIB CONTAINER PUBLISH 

on:
  workflow_dispatch
permissions: 
  id-token: write
  contents: read

env:
#   REGISTRY_NAME: ghcr.io
    CLUSTER_NAME: PcfToAksMigration
    RESOURCE_GROUP: rg_fedex_east_us
    NAMESPACE: default

jobs:
  build:

    runs-on: ubuntu-latest

    # steps:
    # - uses: actions/checkout@v3
    # - name: Set up JDK 17
    #   uses: actions/setup-java@v3
    #   with:
    #     java-version: '17'
    #     distribution: 'temurin'
    #     cache: maven
    
    # - name: Build with Maven
    #   run: |
    #     mvn clean package jib:build -Djib.to.auth.username=${{ github.actor }} -Djib.to.auth.password=${{secrets.TOKEN_GITHUB}} --file pom.xml
        
        
    # - name: Fetch image from GitHub Package 
    #   run: | 
    #          echo ${{ secrets.TOKEN_GITHUB }} | gh auth login --hostname enterprise.internal --with-token  | gh auth status
    #          gh run download -n ${{ env.GITHUB_CONTAINER_REGISTRY }}

    # - name: Azure login
    #   uses: azure/login@v2
    #   with:
    #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #    enable-AzPSSession: true
   
     
    # - name: Get K8s context
    #   uses: azure/aks-set-context@v3
    #   with:
    #    resource-group: ${{ env.RESOURCE_GROUP }}
    #    cluster-name: ${{ env.CLUSTER_NAME }}
       

   
   
   
  #allow-no-subscriptions: true
   
   
    # - name: Run Azure Cli again
    #   run: |
    #     az account show --output none
          
          
  # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  # enable-AzPSSession: true
        
     # Set the target Azure Kubernetes Service (AKS) cluster. 
    # - uses: azure/aks-set-context@v1
    #   with:
    #     creds: '${{ secrets.AZURE_CREDENTIALS }}'
    #     cluster-name: ${{ env.CLUSTER_NAME }}
    #     resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # # Create namespace if doesn't exist
    # - run: |
    #     kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f 
    
    #  imagePullSecrets:
    #   - name: ghcr-login-secret

   # Create imagepullsecret for Azure Container registry (ACR)
    
    # - uses: azure/k8s-create-secret@v1
    #   with:
    #     container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
    #     container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
    #     container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
    #     secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }} 
 
    # Baking the helm chart to generate the manifests to deploy
    # - uses: azure/k8s-bake@v1
    #   with:
    #     renderEngine: 'helm2'
    #     helmChart: './my-helm-chart/' 
    #     helm-version: 'latest' 
    #   id: bake

    # # Deploy app to AKS
    # - uses: azure/k8s-deploy@v1
    #   with:
    #     manifests: ${{ steps.bake.outputs.manifestsBundle }}
    #     images: |
    #       ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
    #     imagepullsecrets: |
    #       ${{ env.REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}


